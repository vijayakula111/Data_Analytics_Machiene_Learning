// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace nd4j.graph
{

using global::System;
using global::FlatBuffers;

public struct IntTriple : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static IntTriple GetRootAsIntTriple(ByteBuffer _bb) { return GetRootAsIntTriple(_bb, new IntTriple()); }
  public static IntTriple GetRootAsIntTriple(ByteBuffer _bb, IntTriple obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public IntTriple __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int First { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Second { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Third { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<IntTriple> CreateIntTriple(FlatBufferBuilder builder,
      int first = 0,
      int second = 0,
      int third = 0) {
    builder.StartObject(3);
    IntTriple.AddThird(builder, third);
    IntTriple.AddSecond(builder, second);
    IntTriple.AddFirst(builder, first);
    return IntTriple.EndIntTriple(builder);
  }

  public static void StartIntTriple(FlatBufferBuilder builder) { builder.StartObject(3); }
  public static void AddFirst(FlatBufferBuilder builder, int first) { builder.AddInt(0, first, 0); }
  public static void AddSecond(FlatBufferBuilder builder, int second) { builder.AddInt(1, second, 0); }
  public static void AddThird(FlatBufferBuilder builder, int third) { builder.AddInt(2, third, 0); }
  public static Offset<IntTriple> EndIntTriple(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<IntTriple>(o);
  }
};


}
