// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace nd4j.graph
{

using global::System;
using global::FlatBuffers;

public struct LongTriple : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static LongTriple GetRootAsLongTriple(ByteBuffer _bb) { return GetRootAsLongTriple(_bb, new LongTriple()); }
  public static LongTriple GetRootAsLongTriple(ByteBuffer _bb, LongTriple obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public LongTriple __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long First { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long Second { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long Third { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }

  public static Offset<LongTriple> CreateLongTriple(FlatBufferBuilder builder,
      long first = 0,
      long second = 0,
      long third = 0) {
    builder.StartObject(3);
    LongTriple.AddThird(builder, third);
    LongTriple.AddSecond(builder, second);
    LongTriple.AddFirst(builder, first);
    return LongTriple.EndLongTriple(builder);
  }

  public static void StartLongTriple(FlatBufferBuilder builder) { builder.StartObject(3); }
  public static void AddFirst(FlatBufferBuilder builder, long first) { builder.AddLong(0, first, 0); }
  public static void AddSecond(FlatBufferBuilder builder, long second) { builder.AddLong(1, second, 0); }
  public static void AddThird(FlatBufferBuilder builder, long third) { builder.AddLong(2, third, 0); }
  public static Offset<LongTriple> EndLongTriple(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<LongTriple>(o);
  }
};


}
