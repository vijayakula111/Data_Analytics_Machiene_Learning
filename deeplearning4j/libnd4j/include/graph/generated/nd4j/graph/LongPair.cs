// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace nd4j.graph
{

using global::System;
using global::FlatBuffers;

public struct LongPair : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static LongPair GetRootAsLongPair(ByteBuffer _bb) { return GetRootAsLongPair(_bb, new LongPair()); }
  public static LongPair GetRootAsLongPair(ByteBuffer _bb, LongPair obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public LongPair __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long First { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long Second { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }

  public static Offset<LongPair> CreateLongPair(FlatBufferBuilder builder,
      long first = 0,
      long second = 0) {
    builder.StartObject(2);
    LongPair.AddSecond(builder, second);
    LongPair.AddFirst(builder, first);
    return LongPair.EndLongPair(builder);
  }

  public static void StartLongPair(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddFirst(FlatBufferBuilder builder, long first) { builder.AddLong(0, first, 0); }
  public static void AddSecond(FlatBufferBuilder builder, long second) { builder.AddLong(1, second, 0); }
  public static Offset<LongPair> EndLongPair(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<LongPair>(o);
  }
};


}
