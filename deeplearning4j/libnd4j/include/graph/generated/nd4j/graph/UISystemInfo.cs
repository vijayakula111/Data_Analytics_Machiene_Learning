// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace nd4j.graph
{

using global::System;
using global::FlatBuffers;

public struct UISystemInfo : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static UISystemInfo GetRootAsUISystemInfo(ByteBuffer _bb) { return GetRootAsUISystemInfo(_bb, new UISystemInfo()); }
  public static UISystemInfo GetRootAsUISystemInfo(ByteBuffer _bb, UISystemInfo obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public UISystemInfo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int PhysicalCores { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<UISystemInfo> CreateUISystemInfo(FlatBufferBuilder builder,
      int physicalCores = 0) {
    builder.StartObject(1);
    UISystemInfo.AddPhysicalCores(builder, physicalCores);
    return UISystemInfo.EndUISystemInfo(builder);
  }

  public static void StartUISystemInfo(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddPhysicalCores(FlatBufferBuilder builder, int physicalCores) { builder.AddInt(0, physicalCores, 0); }
  public static Offset<UISystemInfo> EndUISystemInfo(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<UISystemInfo>(o);
  }
};


}
